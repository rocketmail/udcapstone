# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

jobs: 
  build-lint:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 

  upload-docker:
    docker:
      - image: cimg/python:3.7.16
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build docker container
          command: |
            docker build -t $DOCKER_IMAGE_NAME .
            docker image ls
      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:v1.0.0
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:v1.0.0

  create-cluster:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - run:
          name: Installing AWS CLI
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: Check existing cluster
          command: |
            export OLD_CLUSTER=$(aws eks list-clusters --query 'clusters' --output text | tr '\t' '\n' | grep << parameters.cluster-name >>)
            echo OLD_CLUSTER: "${OLD_CLUSTER}"

            if [ "$OLD_CLUSTER" == << parameters.cluster-name >> ]; then
              echo "Found OLD_CLUSTER !!"
              circleci step halt
            else
              echo "Not Found OLD_CLUSTER !!"
            fi
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>

  check-cluster:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
            kubectl get nodes
          name: Test cluster
    
  deploy-cluster:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl create deploy $DOCKERHUB_USERNAME --image=$DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:v1.0.0
            kubectl get deploy,rs,svc,pods
          name: Deploy cluster

  create-service:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: ./service.yml
          resource-name: service/rolling-service

  create-deployment:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: ./deployment.yml
          resource-name: deployment/rolling-app

workflows:
  default:
    jobs:
      - build-lint
      - upload-docker:
          requires: 
            - build-lint
      - create-cluster:
          cluster-name: capstone
          requires:
            - upload-docker
      - check-cluster:
          cluster-name: capstone
          requires:
            - create-cluster
      - create-service:
          cluster-name: capstone
          requires:
            - check-cluster
      - create-deployment:
          cluster-name: capstone
          requires:
            - create-service
      - aws-eks/update-container-image:
          cluster-name: capstone
          container-image-updates: "rolling-deployment-container=$DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:v1.0.0"
          requires:
            - create-deployment
          resource-name: deployment/rolling-app
      